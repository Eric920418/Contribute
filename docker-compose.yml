version: '3.8'

services:
  # PostgreSQL 資料庫
  postgres:
    image: postgres:15-alpine
    container_name: conference_postgres
    environment:
      POSTGRES_DB: conference_platform
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    ports:
      - "5433:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - conference_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d conference_platform"]
      interval: 10s
      timeout: 5s
      retries: 5

  # MinIO 物件儲存 (S3 相容)
  minio:
    image: minio/minio:latest
    container_name: conference_minio
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    networks:
      - conference_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  # MailHog SMTP 測試伺服器
  mailhog:
    image: mailhog/mailhog:latest
    container_name: conference_mailhog
    ports:
      - "1025:1025"  # SMTP port
      - "8025:8025"  # Web UI port
    networks:
      - conference_network

  # Redis (用於 session 儲存和 cache)
  redis:
    image: redis:7-alpine
    container_name: conference_redis
    command: redis-server --appendonly yes
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - conference_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3

  # Nginx 反向代理
  nginx:
    image: nginx:alpine
    container_name: conference_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - web
    networks:
      - conference_network
    restart: unless-stopped

  # Next.js 應用程式 (開發模式)
  web:
    build:
      context: .
      dockerfile: apps/web/Dockerfile.dev
    container_name: conference_web
    environment:
      - NODE_ENV=development
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/conference_platform?schema=public
      - NEXTAUTH_URL=http://localhost:3000
      - NEXTAUTH_SECRET=development-secret-key
      - SMTP_HOST=mailhog
      - SMTP_PORT=1025
      - SMTP_FROM=noreply@conference-platform.local
      - MINIO_ENDPOINT=minio
      - MINIO_PORT=9000
      - MINIO_ACCESS_KEY=minioadmin
      - MINIO_SECRET_KEY=minioadmin
      - REDIS_URL=redis://redis:6379
    ports:
      - "3000:3000"
    volumes:
      - ./apps/web:/app
      - /app/node_modules
      - /app/.next
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
      mailhog:
        condition: service_started
    networks:
      - conference_network
    restart: unless-stopped
    command: >
      sh -c "
        pnpm install &&
        pnpm db:generate &&
        pnpm db:push &&
        pnpm db:seed &&
        pnpm dev
      "

volumes:
  postgres_data:
    driver: local
  minio_data:
    driver: local
  redis_data:
    driver: local

networks:
  conference_network:
    driver: bridge